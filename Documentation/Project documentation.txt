*******************************************
********** PROJECT EXPLANATION ************
************ V. De Dominicis **************
*******************************************

1 - How anagrams are detected
To spot the anagrams a mathematical method has been used. This method assigns to each letter a different prime number, which allow us to calculate for each word a "word value" by multiplying the numbers associated to its letters. The unique factorization theorem guarantee that two non-anagram words can't have the same value.
The second idea to spot anagrams was to compare the different words after their letters has been sorted, but it has been rejected because the mathematical method previously described is faster and consume less memory, which is fundamental for big sets of words.
1.1 - Problem of the choosen method
The main problem of the mathematical approach above mentioned is the potential overflow of the variable which stores the value for a given word; this could happen for very long words and could generate false positives. Even if this problem is strictly related to every specific word, we can roughly say that this scenario must be considered for words with 25 or more letters. 
In those cases the only way to determine if two words are anagrams is sorting each word's letters and comparing the two new "sorted" words.

2 - Architecture
The program is composed by three classes, all placed in the package "anagrams".

2.1 - FileUtils
This class is a toolbox to manage the files needed by the program. It provides two methods, the first reads the name of the file containing the words from the specific .properties file, the latter reads the words from the file in which they are stored.
2.2 - AnagramUtils
This class is a toolbox to manage single words and words list. It provides three methods: the first returns the numeric value related to a given word; the second split a words list into sublists of anagrams. The lists with only one item contains the words for whom no anagrams has been found; the third convert a given list of anagrams in a single string which is the concatenation of the anagrams separated by a space.
2.3 - AnagramsFinder
The starter class; AnagramFinder starts the program and uses the methods provided by the other classes to produce the desired output.

FileUtils and AnagramUtils classes can be viewed as modules; each one is independent from the rest of the program and provides some methods aligned with its specific purpose. The only interaction between the classes is from AnagramsFinder to FileUtils and AnagramsUtils. 
The program has been splitted into these three classes to make it modular, to minimize the coupling and to make it more easily maintainable and testable.

3 - Test
The program has been tested with a suite of unit tests; these ones are aimed to check the correctness of AnagramUtils and FileUtils methods.
The main goal was to test every method in the most complete way, simulating every possible scenario. For this reason the two methods of FileUtils class have been kept separated. These tests are run automatically at every push request by travisCI, a continuos integration system which has been integrated with this repository (check section 6 for detail), or they can be ran with a maven build.

4 - Output
The output is provided with the log file. Two different log files has been implemented, one to store the messages of the test classes, the other to store the output of the program. To clearly distinct the test session from the normal execution, an alert is print in the program's log when the test are launched and when they ends.
To create the log files the library log4j has been used. This one was chosen because is widely used, easy to set up and well documented.

5 - Scalability
The program was designed to reduce as much as possible the memory consumption. 
An option to reduce more its memory consumption is to print anagrams when they are found instead of grouping and printing them at the end of the elaboration. In this way is no more necessary to store the anagrams groups into a variable and this makes the program able to manage larger datasets without further changes. This approach implies to find a way to groups the anagrams, one possibile solution is to produce several output files, one for each anagrams group found.
In terms of speed, all choices were made to make the program as fast as possible. More precisely:
  - LinkedList instead of ArrayList to store anagrams groups: used because insertion is the operation the program performs more often on the declared lists
  - HashMap to store the pairs word value - anagrams groups and the prime number associated to each letter: used because they are optimized for searching operation
  - streams to print the anagrams groups: used because they are faster than the traditional iteration

6 - Building and continuos integration
The program has been developed as maven project, thus it can be run without an IDE. It also has been integrated with TravisCI, which runs the maven script specified in the travis.yml at every push request.
  
7 - Managing big datasets
To manage big datasets of words a file approach could be problematic. For this reason the idea is to modify the program in order to use a database to store the words, which could grant a faster and more reliable program. In the following subparagraphs all the details of this approach will be explained.
7.1 - Database structure
Assuming to use a database, one tables could be enough to manage the system complexity; this, called "WORDS", is aimed to store the words to process and their values.

WORDS {
  Word - String, primary key
  WordValue - number, the value assigned to a word
}

The choice to use the field "word" as primary key is aimed to assure that no duplicate will be present in the WORDS table. This could lead to a reduction of the dataset dimension, which implies a faster elaboration.
7.2 - Select query
Due to the dimension of the dataset, processing the whole amount of data at once could lead to memory problems. To manage this complexity two strategies can be applied:
- Order the words by length: in this way we can select only words with length = x, with 2 <= x <= longest word.length;
- Selecting blocks of words: assuming that the database provide a "rownumber" function, which assign to each entry in a resultset a progressive number, we can select only the words with progressive number between x to y value;
Iterating this two strategies changing the parameters allows to split the dataset into sub-datasets easier to manage.
The first strategy is aimed to create a sort of "checkpoint" during the words elaboration in which some middle mechanism could be implemented. For example, is it possibile to suppose that, when all the words with length equals to "x" have been processed, the found anagrams could be saved into one or more files and this words could be removed from the dataset.
7.3 - Deferred queries
Using the PreparedStatements the queries to update "WORDS" table can be deferred and executed together. This could makes the program faster reducing the interactions with the database, which are time consuming operations.
